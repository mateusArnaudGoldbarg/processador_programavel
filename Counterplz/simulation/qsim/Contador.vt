// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2018 18:02:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Contador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Contador_vlg_sample_tst(
	clk_cpu,
	rst_cpu,
	start_cpu,
	sampler_tx
);
input  clk_cpu;
input  rst_cpu;
input  start_cpu;
output sampler_tx;

reg sample;
time current_time;
always @(clk_cpu or rst_cpu or start_cpu)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Contador_vlg_check_tst (
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	hex0,
	hex1,
	hex2,
	hex3,
	IRds,
	output_cpu,
	sampler_rx
);
input  a;
input  b;
input  c;
input  d;
input  e;
input  f;
input  g;
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input [6:0] hex3;
input [7:0] IRds;
input [3:0] output_cpu;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg [6:0] hex3_expected;
reg [7:0] IRds_expected;
reg [3:0] output_cpu_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg [6:0] hex3_prev;
reg [7:0] IRds_prev;
reg [3:0] output_cpu_prev;

reg [3:0] output_cpu_expected_prev;

reg [3:0] last_output_cpu_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	IRds_prev = IRds;
	output_cpu_prev = output_cpu;
end

// update expected /o prevs

always @(trigger)
begin
	output_cpu_expected_prev = output_cpu_expected;
end


// expected output_cpu[ 3 ]
initial
begin
	output_cpu_expected[3] = 1'bX;
end 
// expected output_cpu[ 2 ]
initial
begin
	output_cpu_expected[2] = 1'bX;
end 
// expected output_cpu[ 1 ]
initial
begin
	output_cpu_expected[1] = 1'bX;
end 
// expected output_cpu[ 0 ]
initial
begin
	output_cpu_expected[0] = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or d_expected or d or e_expected or e or f_expected or f or g_expected or g or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or IRds_expected or IRds or output_cpu_expected or output_cpu)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected e = %b | expected f = %b | expected g = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected IRds = %b | expected output_cpu = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,IRds_expected_prev,output_cpu_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real d = %b | real e = %b | real f = %b | real g = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real IRds = %b | real output_cpu = %b | ",a_prev,b_prev,c_prev,d_prev,e_prev,f_prev,g_prev,hex0_prev,hex1_prev,hex2_prev,hex3_prev,IRds_prev,output_cpu_prev);
`endif
	if (
		( output_cpu_expected_prev[0] !== 1'bx ) && ( output_cpu_prev[0] !== output_cpu_expected_prev[0] )
		&& ((output_cpu_expected_prev[0] !== last_output_cpu_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_cpu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_cpu_expected_prev);
		$display ("     Real value = %b", output_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_output_cpu_exp[0] = output_cpu_expected_prev[0];
	end
	if (
		( output_cpu_expected_prev[1] !== 1'bx ) && ( output_cpu_prev[1] !== output_cpu_expected_prev[1] )
		&& ((output_cpu_expected_prev[1] !== last_output_cpu_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_cpu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_cpu_expected_prev);
		$display ("     Real value = %b", output_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_output_cpu_exp[1] = output_cpu_expected_prev[1];
	end
	if (
		( output_cpu_expected_prev[2] !== 1'bx ) && ( output_cpu_prev[2] !== output_cpu_expected_prev[2] )
		&& ((output_cpu_expected_prev[2] !== last_output_cpu_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_cpu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_cpu_expected_prev);
		$display ("     Real value = %b", output_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_output_cpu_exp[2] = output_cpu_expected_prev[2];
	end
	if (
		( output_cpu_expected_prev[3] !== 1'bx ) && ( output_cpu_prev[3] !== output_cpu_expected_prev[3] )
		&& ((output_cpu_expected_prev[3] !== last_output_cpu_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_cpu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_cpu_expected_prev);
		$display ("     Real value = %b", output_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_output_cpu_exp[3] = output_cpu_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Contador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_cpu;
reg rst_cpu;
reg start_cpu;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [7:0] IRds;
wire [3:0] output_cpu;

wire sampler;                             

// assign statements (if any)                          
Contador i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk_cpu(clk_cpu),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.IRds(IRds),
	.output_cpu(output_cpu),
	.rst_cpu(rst_cpu),
	.start_cpu(start_cpu)
);

// rst_cpu
initial
begin
	rst_cpu = 1'b0;
end 

// start_cpu
initial
begin
	start_cpu = 1'b1;
end 

// clk_cpu
always
begin
	clk_cpu = 1'b0;
	clk_cpu = #1000 1'b1;
	#1000;
end 

Contador_vlg_sample_tst tb_sample (
	.clk_cpu(clk_cpu),
	.rst_cpu(rst_cpu),
	.start_cpu(start_cpu),
	.sampler_tx(sampler)
);

Contador_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.IRds(IRds),
	.output_cpu(output_cpu),
	.sampler_rx(sampler)
);
endmodule

